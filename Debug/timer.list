
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800268c  0800268c  0000368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026bc  080026bc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080026bc  080026bc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026bc  080026bc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026bc  080026bc  000036bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026c0  080026c0  000036c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080026c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080026d0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080026d0  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b36  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001558  00000000  00000000  0000bb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0000d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006df  00000000  00000000  0000d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018501  00000000  00000000  0000e07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a00c  00000000  00000000  00026580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009011a  00000000  00000000  0003058c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c06a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f90  00000000  00000000  000c06ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000c267c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002674 	.word	0x08002674

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002674 	.word	0x08002674

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:

volatile bool is_tim16_period_elapsed = false;
volatile bool is_tim3_period_elapsed = false;

/* Update Event (ARR overflow) (UEV) */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM16) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a08      	ldr	r2, [pc, #32]	@ (8000250 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d102      	bne.n	8000238 <HAL_TIM_PeriodElapsedCallback+0x18>
		is_tim16_period_elapsed = true;
 8000232:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM3) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a06      	ldr	r2, [pc, #24]	@ (8000258 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d102      	bne.n	8000248 <HAL_TIM_PeriodElapsedCallback+0x28>
		is_tim3_period_elapsed = true;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
	}

}
 8000248:	46c0      	nop			@ (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40014400 	.word	0x40014400
 8000254:	200000b8 	.word	0x200000b8
 8000258:	40000400 	.word	0x40000400
 800025c:	200000b9 	.word	0x200000b9

08000260 <HAL_GPIO_EXTI_Callback>:

volatile bool is_button_pressed = false;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	0002      	movs	r2, r0
 8000268:	1dbb      	adds	r3, r7, #6
 800026a:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == GPIO_PIN_0) {
 800026c:	1dbb      	adds	r3, r7, #6
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d102      	bne.n	800027a <HAL_GPIO_EXTI_Callback+0x1a>
		is_button_pressed = true;
 8000274:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <HAL_GPIO_EXTI_Callback+0x24>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
	}

}
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)
 8000284:	200000ba 	.word	0x200000ba

08000288 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint8_t counter = 1;
 800028e:	1dfb      	adds	r3, r7, #7
 8000290:	2201      	movs	r2, #1
 8000292:	701a      	strb	r2, [r3, #0]
	/* Коэффициент заполнения, Pulse, TIM3->CCR3 */
	uint16_t pulse = 0;
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	801a      	strh	r2, [r3, #0]
	bool is_led_on = false;
 800029a:	1cfb      	adds	r3, r7, #3
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002a0:	f000 fb84 	bl	80009ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002a4:	f000 f89e 	bl	80003e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002a8:	f000 f99a 	bl	80005e0 <MX_GPIO_Init>
	MX_TIM16_Init();
 80002ac:	f000 f950 	bl	8000550 <MX_TIM16_Init>
	MX_TIM3_Init();
 80002b0:	f000 f8e4 	bl	800047c <MX_TIM3_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002b4:	4b44      	ldr	r3, [pc, #272]	@ (80003c8 <main+0x140>)
 80002b6:	2108      	movs	r1, #8
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fc65 	bl	8001b88 <HAL_TIM_PWM_Start>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (is_button_pressed) {
 80002be:	4b43      	ldr	r3, [pc, #268]	@ (80003cc <main+0x144>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00a      	beq.n	80002de <main+0x56>
			HAL_TIM_Base_Start_IT(&htim16);
 80002c8:	4b41      	ldr	r3, [pc, #260]	@ (80003d0 <main+0x148>)
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fb84 	bl	80019d8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80002d0:	4b3d      	ldr	r3, [pc, #244]	@ (80003c8 <main+0x140>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fb80 	bl	80019d8 <HAL_TIM_Base_Start_IT>
			is_button_pressed = false;
 80002d8:	4b3c      	ldr	r3, [pc, #240]	@ (80003cc <main+0x144>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
		}

		if (is_tim16_period_elapsed) {
 80002de:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <main+0x14c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d029      	beq.n	800033c <main+0xb4>
			is_tim16_period_elapsed = false;
 80002e8:	4b3a      	ldr	r3, [pc, #232]	@ (80003d4 <main+0x14c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

			switch (counter) {
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d002      	beq.n	80002fc <main+0x74>
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d008      	beq.n	800030c <main+0x84>
 80002fa:	e013      	b.n	8000324 <main+0x9c>
			case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80002fc:	2380      	movs	r3, #128	@ 0x80
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4835      	ldr	r0, [pc, #212]	@ (80003d8 <main+0x150>)
 8000302:	2201      	movs	r2, #1
 8000304:	0019      	movs	r1, r3
 8000306:	f000 fe0b 	bl	8000f20 <HAL_GPIO_WritePin>
				break;
 800030a:	e00b      	b.n	8000324 <main+0x9c>
			case 2:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800030c:	2380      	movs	r3, #128	@ 0x80
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	4831      	ldr	r0, [pc, #196]	@ (80003d8 <main+0x150>)
 8000312:	2200      	movs	r2, #0
 8000314:	0019      	movs	r1, r3
 8000316:	f000 fe03 	bl	8000f20 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim16);
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <main+0x148>)
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fbad 	bl	8001a7c <HAL_TIM_Base_Stop_IT>
				break;
 8000322:	46c0      	nop			@ (mov r8, r8)
			}
			counter = (counter < 2) ? counter + 1 : 1;
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d804      	bhi.n	8000336 <main+0xae>
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	e000      	b.n	8000338 <main+0xb0>
 8000336:	2201      	movs	r2, #1
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
		}

		if (is_tim3_period_elapsed) {
 800033c:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <main+0x154>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0bb      	beq.n	80002be <main+0x36>
			is_tim3_period_elapsed = false;
 8000346:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <main+0x154>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]

			/* turn on led, 4 c */
			if (pulse < PWM_STOP_PULSE && !is_led_on) {
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	881a      	ldrh	r2, [r3, #0]
 8000350:	23fa      	movs	r3, #250	@ 0xfa
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	429a      	cmp	r2, r3
 8000356:	d20f      	bcs.n	8000378 <main+0xf0>
 8000358:	1cfb      	adds	r3, r7, #3
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2201      	movs	r2, #1
 800035e:	4053      	eors	r3, r2
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d008      	beq.n	8000378 <main+0xf0>
				pulse++;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	881a      	ldrh	r2, [r3, #0]
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	3201      	adds	r2, #1
 800036e:	801a      	strh	r2, [r3, #0]
				TIM3->CCR3 = pulse;
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <main+0x158>)
 8000372:	1d3a      	adds	r2, r7, #4
 8000374:	8812      	ldrh	r2, [r2, #0]
 8000376:	63da      	str	r2, [r3, #60]	@ 0x3c
			}

			if (pulse == PWM_STOP_PULSE) {
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	881a      	ldrh	r2, [r3, #0]
 800037c:	23fa      	movs	r3, #250	@ 0xfa
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	429a      	cmp	r2, r3
 8000382:	d102      	bne.n	800038a <main+0x102>
				is_led_on = true;
 8000384:	1cfb      	adds	r3, r7, #3
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
			}


			/* turn off led, 4 c */
			if (pulse > PWM_START_PULSE && is_led_on) {
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00c      	beq.n	80003ac <main+0x124>
 8000392:	1cfb      	adds	r3, r7, #3
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d008      	beq.n	80003ac <main+0x124>
				pulse--;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	881a      	ldrh	r2, [r3, #0]
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	3a01      	subs	r2, #1
 80003a2:	801a      	strh	r2, [r3, #0]
				TIM3->CCR3 = pulse;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <main+0x158>)
 80003a6:	1d3a      	adds	r2, r7, #4
 80003a8:	8812      	ldrh	r2, [r2, #0]
 80003aa:	63da      	str	r2, [r3, #60]	@ 0x3c
			}

			if (pulse == PWM_START_PULSE) {
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d000      	beq.n	80003b6 <main+0x12e>
 80003b4:	e783      	b.n	80002be <main+0x36>
				HAL_TIM_Base_Stop_IT(&htim3);
 80003b6:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <main+0x140>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fb5f 	bl	8001a7c <HAL_TIM_Base_Stop_IT>
				is_led_on = false;
 80003be:	1cfb      	adds	r3, r7, #3
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
		if (is_button_pressed) {
 80003c4:	e77b      	b.n	80002be <main+0x36>
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	20000028 	.word	0x20000028
 80003cc:	200000ba 	.word	0x200000ba
 80003d0:	20000070 	.word	0x20000070
 80003d4:	200000b8 	.word	0x200000b8
 80003d8:	48000800 	.word	0x48000800
 80003dc:	200000b9 	.word	0x200000b9
 80003e0:	40000400 	.word	0x40000400

080003e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b093      	sub	sp, #76	@ 0x4c
 80003e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003ea:	2414      	movs	r4, #20
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2334      	movs	r3, #52	@ 0x34
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 f910 	bl	800261a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	2310      	movs	r3, #16
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 f909 	bl	800261a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	0021      	movs	r1, r4
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2202      	movs	r2, #2
 800040e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2201      	movs	r2, #1
 8000414:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2210      	movs	r2, #16
 800041a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2202      	movs	r2, #2
 8000420:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	0212      	lsls	r2, r2, #8
 8000428:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	0352      	lsls	r2, r2, #13
 8000430:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000438:	187b      	adds	r3, r7, r1
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fdaa 	bl	8000f94 <HAL_RCC_OscConfig>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x64>
		Error_Handler();
 8000444:	f000 f930 	bl	80006a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2207      	movs	r2, #7
 800044c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2202      	movs	r2, #2
 8000452:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2101      	movs	r1, #1
 8000464:	0018      	movs	r0, r3
 8000466:	f001 f91b 	bl	80016a0 <HAL_RCC_ClockConfig>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x8e>
		Error_Handler();
 800046e:	f000 f91b 	bl	80006a8 <Error_Handler>
	}
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b013      	add	sp, #76	@ 0x4c
 8000478:	bd90      	pop	{r4, r7, pc}
	...

0800047c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	0018      	movs	r0, r3
 8000486:	231c      	movs	r3, #28
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f002 f8c5 	bl	800261a <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000490:	4b2b      	ldr	r3, [pc, #172]	@ (8000540 <MX_TIM3_Init+0xc4>)
 8000492:	4a2c      	ldr	r2, [pc, #176]	@ (8000544 <MX_TIM3_Init+0xc8>)
 8000494:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 199; //  240 kHz
 8000496:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_TIM3_Init+0xc4>)
 8000498:	22c7      	movs	r2, #199	@ 0xc7
 800049a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_TIM3_Init+0xc4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = PWM_STOP_PULSE - 1; //999 -> 240 Hz = 4 ms
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004a4:	4a28      	ldr	r2, [pc, #160]	@ (8000548 <MX_TIM3_Init+0xcc>)
 80004a6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a8:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ae:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80004b4:	4b22      	ldr	r3, [pc, #136]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fa3e 	bl	8001938 <HAL_TIM_Base_Init>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x48>
		Error_Handler();
 80004c0:	f000 f8f2 	bl	80006a8 <Error_Handler>
	}
	HAL_TIM_Base_Init(&htim3);
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fa36 	bl	8001938 <HAL_TIM_Base_Init>

	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80004cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fb02 	bl	8001ad8 <HAL_TIM_PWM_Init>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM3_Init+0x60>
		Error_Handler();
 80004d8:	f000 f8e6 	bl	80006a8 <Error_Handler>
	}

	/* Configure channel */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2260      	movs	r2, #96	@ 0x60
 80004e0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80004f4:	1d39      	adds	r1, r7, #4
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <MX_TIM3_Init+0xc4>)
 80004f8:	2208      	movs	r2, #8
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fcea 	bl	8001ed4 <HAL_TIM_PWM_ConfigChannel>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000504:	f000 f8d0 	bl	80006a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000508:	4b10      	ldr	r3, [pc, #64]	@ (800054c <MX_TIM3_Init+0xd0>)
 800050a:	69da      	ldr	r2, [r3, #28]
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_TIM3_Init+0xd0>)
 800050e:	2102      	movs	r1, #2
 8000510:	430a      	orrs	r2, r1
 8000512:	61da      	str	r2, [r3, #28]
 8000514:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <MX_TIM3_Init+0xd0>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	2202      	movs	r2, #2
 800051a:	4013      	ands	r3, r2
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	2010      	movs	r0, #16
 8000526:	f000 fb51 	bl	8000bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800052a:	2010      	movs	r0, #16
 800052c:	f000 fb63 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000530:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <MX_TIM3_Init+0xc4>)
 8000532:	0018      	movs	r0, r3
 8000534:	f000 f962 	bl	80007fc <HAL_TIM_MspPostInit>
}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b008      	add	sp, #32
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000028 	.word	0x20000028
 8000544:	40000400 	.word	0x40000400
 8000548:	000003e7 	.word	0x000003e7
 800054c:	40021000 	.word	0x40021000

08000550 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000556:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <MX_TIM16_Init+0x80>)
 8000558:	4a1e      	ldr	r2, [pc, #120]	@ (80005d4 <MX_TIM16_Init+0x84>)
 800055a:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48000; // 48 000 000 / 48 000 = 1000 Hz
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_TIM16_Init+0x80>)
 800055e:	4a1e      	ldr	r2, [pc, #120]	@ (80005d8 <MX_TIM16_Init+0x88>)
 8000560:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_TIM16_Init+0x80>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000; // 1000 / 1000 = 1 c
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <MX_TIM16_Init+0x80>)
 800056a:	22fa      	movs	r2, #250	@ 0xfa
 800056c:	0092      	lsls	r2, r2, #2
 800056e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <MX_TIM16_Init+0x80>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 1; // 2 c
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_TIM16_Init+0x80>)
 8000578:	2201      	movs	r2, #1
 800057a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_TIM16_Init+0x80>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_TIM16_Init+0x80>)
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f9d7 	bl	8001938 <HAL_TIM_Base_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM16_Init+0x42>
		Error_Handler();
 800058e:	f000 f88b 	bl	80006a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	__HAL_RCC_TIM16_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_TIM16_Init+0x8c>)
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_TIM16_Init+0x8c>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0289      	lsls	r1, r1, #10
 800059c:	430a      	orrs	r2, r1
 800059e:	619a      	str	r2, [r3, #24]
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MX_TIM16_Init+0x8c>)
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	029b      	lsls	r3, r3, #10
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2101      	movs	r1, #1
 80005b2:	2015      	movs	r0, #21
 80005b4:	f000 fb0a 	bl	8000bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005b8:	2015      	movs	r0, #21
 80005ba:	f000 fb1c 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Init(&htim16);
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <MX_TIM16_Init+0x80>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f9b9 	bl	8001938 <HAL_TIM_Base_Init>
	/* USER CODE END TIM16_Init 2 */

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	20000070 	.word	0x20000070
 80005d4:	40014400 	.word	0x40014400
 80005d8:	0000bb80 	.word	0x0000bb80
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b089      	sub	sp, #36	@ 0x24
 80005e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005e6:	240c      	movs	r4, #12
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f002 f812 	bl	800261a <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	0289      	lsls	r1, r1, #10
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	0309      	lsls	r1, r1, #12
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	031b      	lsls	r3, r3, #12
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	481c      	ldr	r0, [pc, #112]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	0019      	movs	r1, r3
 8000638:	f000 fc72 	bl	8000f20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2288      	movs	r2, #136	@ 0x88
 8000646:	0352      	lsls	r2, r2, #13
 8000648:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	193a      	adds	r2, r7, r4
 8000652:	2390      	movs	r3, #144	@ 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fae9 	bl	8000c30 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD5_Pin */
	GPIO_InitStruct.Pin = LD5_Pin;
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2280      	movs	r2, #128	@ 0x80
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 800067a:	187b      	adds	r3, r7, r1
 800067c:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 800067e:	0019      	movs	r1, r3
 8000680:	0010      	movs	r0, r2
 8000682:	f000 fad5 	bl	8000c30 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2005      	movs	r0, #5
 800068c:	f000 fa9e 	bl	8000bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000690:	2005      	movs	r0, #5
 8000692:	f000 fab0 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b009      	add	sp, #36	@ 0x24
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	e7fd      	b.n	80006b0 <Error_Handler+0x8>

080006b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <HAL_MspInit+0x44>)
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HAL_MspInit+0x44>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	619a      	str	r2, [r3, #24]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_MspInit+0x44>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_MspInit+0x44>)
 80006d4:	69da      	ldr	r2, [r3, #28]
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <HAL_MspInit+0x44>)
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	0549      	lsls	r1, r1, #21
 80006dc:	430a      	orrs	r2, r1
 80006de:	61da      	str	r2, [r3, #28]
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_MspInit+0x44>)
 80006e2:	69da      	ldr	r2, [r3, #28]
 80006e4:	2380      	movs	r3, #128	@ 0x80
 80006e6:	055b      	lsls	r3, r3, #21
 80006e8:	4013      	ands	r3, r2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a37      	ldr	r2, [pc, #220]	@ (80007e8 <HAL_TIM_Base_MspInit+0xec>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d114      	bne.n	8000738 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 8000710:	69da      	ldr	r2, [r3, #28]
 8000712:	4b36      	ldr	r3, [pc, #216]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 8000714:	2102      	movs	r1, #2
 8000716:	430a      	orrs	r2, r1
 8000718:	61da      	str	r2, [r3, #28]
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	2202      	movs	r2, #2
 8000720:	4013      	ands	r3, r2
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2010      	movs	r0, #16
 800072c:	f000 fa4e 	bl	8000bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000730:	2010      	movs	r0, #16
 8000732:	f000 fa60 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000736:	e052      	b.n	80007de <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM15)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <HAL_TIM_Base_MspInit+0xf4>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d116      	bne.n	8000770 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000742:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 8000744:	699a      	ldr	r2, [r3, #24]
 8000746:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	0249      	lsls	r1, r1, #9
 800074c:	430a      	orrs	r2, r1
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	025b      	lsls	r3, r3, #9
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2014      	movs	r0, #20
 8000764:	f000 fa32 	bl	8000bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8000768:	2014      	movs	r0, #20
 800076a:	f000 fa44 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
}
 800076e:	e036      	b.n	80007de <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM16)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1f      	ldr	r2, [pc, #124]	@ (80007f4 <HAL_TIM_Base_MspInit+0xf8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d116      	bne.n	80007a8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	0289      	lsls	r1, r1, #10
 8000784:	430a      	orrs	r2, r1
 8000786:	619a      	str	r2, [r3, #24]
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	029b      	lsls	r3, r3, #10
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2015      	movs	r0, #21
 800079c:	f000 fa16 	bl	8000bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80007a0:	2015      	movs	r0, #21
 80007a2:	f000 fa28 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
}
 80007a6:	e01a      	b.n	80007de <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM17)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <HAL_TIM_Base_MspInit+0xfc>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d115      	bne.n	80007de <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 80007b8:	2180      	movs	r1, #128	@ 0x80
 80007ba:	02c9      	lsls	r1, r1, #11
 80007bc:	430a      	orrs	r2, r1
 80007be:	619a      	str	r2, [r3, #24]
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_TIM_Base_MspInit+0xf0>)
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	02db      	lsls	r3, r3, #11
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2016      	movs	r0, #22
 80007d4:	f000 f9fa 	bl	8000bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80007d8:	2016      	movs	r0, #22
 80007da:	f000 fa0c 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b006      	add	sp, #24
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	40000400 	.word	0x40000400
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40014000 	.word	0x40014000
 80007f4:	40014400 	.word	0x40014400
 80007f8:	40014800 	.word	0x40014800

080007fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	@ 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2414      	movs	r4, #20
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	2314      	movs	r3, #20
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f001 ff03 	bl	800261a <memset>
  if(htim->Instance==TIM3)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a2b      	ldr	r2, [pc, #172]	@ (80008c8 <HAL_TIM_MspPostInit+0xcc>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d125      	bne.n	800086a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <HAL_TIM_MspPostInit+0xd0>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <HAL_TIM_MspPostInit+0xd0>)
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	0309      	lsls	r1, r1, #12
 8000828:	430a      	orrs	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <HAL_TIM_MspPostInit+0xd0>)
 800082e:	695a      	ldr	r2, [r3, #20]
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	031b      	lsls	r3, r3, #12
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2202      	movs	r2, #2
 8000848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	187b      	adds	r3, r7, r1
 800085e:	4a1c      	ldr	r2, [pc, #112]	@ (80008d0 <HAL_TIM_MspPostInit+0xd4>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f000 f9e4 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000868:	e029      	b.n	80008be <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM15)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a19      	ldr	r2, [pc, #100]	@ (80008d4 <HAL_TIM_MspPostInit+0xd8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d124      	bne.n	80008be <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <HAL_TIM_MspPostInit+0xd0>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_TIM_MspPostInit+0xd0>)
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	0289      	lsls	r1, r1, #10
 800087e:	430a      	orrs	r2, r1
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_TIM_MspPostInit+0xd0>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	2380      	movs	r3, #128	@ 0x80
 8000888:	029b      	lsls	r3, r3, #10
 800088a:	4013      	ands	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000890:	2114      	movs	r1, #20
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2204      	movs	r2, #4
 8000896:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	187a      	adds	r2, r7, r1
 80008b2:	2390      	movs	r3, #144	@ 0x90
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 f9b9 	bl	8000c30 <HAL_GPIO_Init>
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b00b      	add	sp, #44	@ 0x2c
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	40000400 	.word	0x40000400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800
 80008d4:	40014000 	.word	0x40014000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f89c 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fb24 	bl	8000f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000920:	4b03      	ldr	r3, [pc, #12]	@ (8000930 <TIM3_IRQHandler+0x14>)
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f9e8 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	20000028 	.word	0x20000028

08000934 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <TIM16_IRQHandler+0x14>)
 800093a:	0018      	movs	r0, r3
 800093c:	f001 f9dc 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	20000070 	.word	0x20000070

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800095c:	f7ff fff6 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000986:	f001 fe51 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fc7d 	bl	8000288 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	080026c4 	.word	0x080026c4
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	200000c0 	.word	0x200000c0

080009a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_COMP_IRQHandler>
	...

080009ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_Init+0x24>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_Init+0x24>)
 80009b6:	2110      	movs	r1, #16
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f809 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c2:	f7ff fe77 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_InitTick+0x5c>)
 80009de:	681c      	ldr	r4, [r3, #0]
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <HAL_InitTick+0x60>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	23fa      	movs	r3, #250	@ 0xfa
 80009e8:	0098      	lsls	r0, r3, #2
 80009ea:	f7ff fb8d 	bl	8000108 <__udivsi3>
 80009ee:	0003      	movs	r3, r0
 80009f0:	0019      	movs	r1, r3
 80009f2:	0020      	movs	r0, r4
 80009f4:	f7ff fb88 	bl	8000108 <__udivsi3>
 80009f8:	0003      	movs	r3, r0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f90b 	bl	8000c16 <HAL_SYSTICK_Config>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e00f      	b.n	8000a28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d80b      	bhi.n	8000a26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f8d8 	bl	8000bcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_InitTick+0x64>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b003      	add	sp, #12
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_IncTick+0x1c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	18d2      	adds	r2, r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	200000bc 	.word	0x200000bc

08000a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b02      	ldr	r3, [pc, #8]	@ (8000a70 <HAL_GetTick+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000bc 	.word	0x200000bc

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a86:	d809      	bhi.n	8000a9c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	231f      	movs	r3, #31
 8000a90:	401a      	ands	r2, r3
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <__NVIC_EnableIRQ+0x30>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	4091      	lsls	r1, r2
 8000a98:	000a      	movs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
  }
}
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	0002      	movs	r2, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b7f      	cmp	r3, #127	@ 0x7f
 8000abc:	d828      	bhi.n	8000b10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abe:	4a2f      	ldr	r2, [pc, #188]	@ (8000b7c <__NVIC_SetPriority+0xd4>)
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	33c0      	adds	r3, #192	@ 0xc0
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	589b      	ldr	r3, [r3, r2]
 8000ace:	1dfa      	adds	r2, r7, #7
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	00d2      	lsls	r2, r2, #3
 8000ada:	21ff      	movs	r1, #255	@ 0xff
 8000adc:	4091      	lsls	r1, r2
 8000ade:	000a      	movs	r2, r1
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	22ff      	movs	r2, #255	@ 0xff
 8000aec:	401a      	ands	r2, r3
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0018      	movs	r0, r3
 8000af4:	2303      	movs	r3, #3
 8000af6:	4003      	ands	r3, r0
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afc:	481f      	ldr	r0, [pc, #124]	@ (8000b7c <__NVIC_SetPriority+0xd4>)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	430a      	orrs	r2, r1
 8000b08:	33c0      	adds	r3, #192	@ 0xc0
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b0e:	e031      	b.n	8000b74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <__NVIC_SetPriority+0xd8>)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	0019      	movs	r1, r3
 8000b18:	230f      	movs	r3, #15
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3306      	adds	r3, #6
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	3304      	adds	r3, #4
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1dfa      	adds	r2, r7, #7
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	0011      	movs	r1, r2
 8000b30:	2203      	movs	r2, #3
 8000b32:	400a      	ands	r2, r1
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	21ff      	movs	r1, #255	@ 0xff
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	401a      	ands	r2, r3
 8000b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	22ff      	movs	r2, #255	@ 0xff
 8000b48:	401a      	ands	r2, r3
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2303      	movs	r3, #3
 8000b52:	4003      	ands	r3, r0
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <__NVIC_SetPriority+0xd8>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	001c      	movs	r4, r3
 8000b60:	230f      	movs	r3, #15
 8000b62:	4023      	ands	r3, r4
 8000b64:	3b08      	subs	r3, #8
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	3306      	adds	r3, #6
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	18c3      	adds	r3, r0, r3
 8000b70:	3304      	adds	r3, #4
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b003      	add	sp, #12
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	045b      	lsls	r3, r3, #17
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d301      	bcc.n	8000b9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e010      	b.n	8000bbe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <SysTick_Config+0x44>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	2103      	movs	r1, #3
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ff7c 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <SysTick_Config+0x44>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <SysTick_Config+0x44>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	1c02      	adds	r2, r0, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff33 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ffaf 	bl	8000b84 <SysTick_Config>
 8000c26:	0003      	movs	r3, r0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e155      	b.n	8000eec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d100      	bne.n	8000c58 <HAL_GPIO_Init+0x28>
 8000c56:	e146      	b.n	8000ee6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d017      	beq.n	8000d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2203      	movs	r2, #3
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	58d3      	ldr	r3, [r2, r3]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2107      	movs	r1, #7
 8000d46:	400b      	ands	r3, r1
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	6939      	ldr	r1, [r7, #16]
 8000d60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	401a      	ands	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	23c0      	movs	r3, #192	@ 0xc0
 8000d9c:	029b      	lsls	r3, r3, #10
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x174>
 8000da2:	e0a0      	b.n	8000ee6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b57      	ldr	r3, [pc, #348]	@ (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	4b56      	ldr	r3, [pc, #344]	@ (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	430a      	orrs	r2, r1
 8000dae:	619a      	str	r2, [r3, #24]
 8000db0:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	2201      	movs	r2, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	4a52      	ldr	r2, [pc, #328]	@ (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	589b      	ldr	r3, [r3, r2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	2390      	movs	r3, #144	@ 0x90
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d019      	beq.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a47      	ldr	r2, [pc, #284]	@ (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0x1ea>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a46      	ldr	r2, [pc, #280]	@ (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d00d      	beq.n	8000e16 <HAL_GPIO_Init+0x1e6>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a45      	ldr	r2, [pc, #276]	@ (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0x1e2>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a44      	ldr	r2, [pc, #272]	@ (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_GPIO_Init+0x1de>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e008      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e004      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	2103      	movs	r1, #3
 8000e24:	400a      	ands	r2, r1
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	4093      	lsls	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e30:	4935      	ldr	r1, [pc, #212]	@ (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3e:	4b37      	ldr	r3, [pc, #220]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	035b      	lsls	r3, r3, #13
 8000e56:	4013      	ands	r3, r2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43da      	mvns	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	039b      	lsls	r3, r3, #14
 8000e80:	4013      	ands	r3, r2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	029b      	lsls	r3, r3, #10
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	1e13      	subs	r3, r2, #0
 8000ef6:	d000      	beq.n	8000efa <HAL_GPIO_Init+0x2ca>
 8000ef8:	e6a2      	b.n	8000c40 <HAL_GPIO_Init+0x10>
  } 
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b006      	add	sp, #24
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	48001000 	.word	0x48001000
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	0008      	movs	r0, r1
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	1cbb      	adds	r3, r7, #2
 8000f2e:	1c02      	adds	r2, r0, #0
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	1c7b      	adds	r3, r7, #1
 8000f34:	1c0a      	adds	r2, r1, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	1c7b      	adds	r3, r7, #1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	0002      	movs	r2, r0
 8000f64:	1dbb      	adds	r3, r7, #6
 8000f66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	1dba      	adds	r2, r7, #6
 8000f6e:	8812      	ldrh	r2, [r2, #0]
 8000f70:	4013      	ands	r3, r2
 8000f72:	d008      	beq.n	8000f86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f76:	1dba      	adds	r2, r7, #6
 8000f78:	8812      	ldrh	r2, [r2, #0]
 8000f7a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f7c:	1dbb      	adds	r3, r7, #6
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff f96d 	bl	8000260 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f000 fb76 	bl	8001694 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2201      	movs	r2, #1
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x20>
 8000fb2:	e08e      	b.n	80010d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fb4:	4bc5      	ldr	r3, [pc, #788]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	220c      	movs	r2, #12
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00e      	beq.n	8000fde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc0:	4bc2      	ldr	r3, [pc, #776]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d117      	bne.n	8000ffc <HAL_RCC_OscConfig+0x68>
 8000fcc:	4bbf      	ldr	r3, [pc, #764]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	23c0      	movs	r3, #192	@ 0xc0
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	2380      	movs	r3, #128	@ 0x80
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d10e      	bne.n	8000ffc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	4bbb      	ldr	r3, [pc, #748]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	029b      	lsls	r3, r3, #10
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d100      	bne.n	8000fec <HAL_RCC_OscConfig+0x58>
 8000fea:	e071      	b.n	80010d0 <HAL_RCC_OscConfig+0x13c>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d000      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x62>
 8000ff4:	e06c      	b.n	80010d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f000 fb4c 	bl	8001694 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d107      	bne.n	8001014 <HAL_RCC_OscConfig+0x80>
 8001004:	4bb1      	ldr	r3, [pc, #708]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4bb0      	ldr	r3, [pc, #704]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	0249      	lsls	r1, r1, #9
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e02f      	b.n	8001074 <HAL_RCC_OscConfig+0xe0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10c      	bne.n	8001036 <HAL_RCC_OscConfig+0xa2>
 800101c:	4bab      	ldr	r3, [pc, #684]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4baa      	ldr	r3, [pc, #680]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001022:	49ab      	ldr	r1, [pc, #684]	@ (80012d0 <HAL_RCC_OscConfig+0x33c>)
 8001024:	400a      	ands	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	4ba8      	ldr	r3, [pc, #672]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4ba7      	ldr	r3, [pc, #668]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800102e:	49a9      	ldr	r1, [pc, #676]	@ (80012d4 <HAL_RCC_OscConfig+0x340>)
 8001030:	400a      	ands	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e01e      	b.n	8001074 <HAL_RCC_OscConfig+0xe0>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b05      	cmp	r3, #5
 800103c:	d10e      	bne.n	800105c <HAL_RCC_OscConfig+0xc8>
 800103e:	4ba3      	ldr	r3, [pc, #652]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4ba2      	ldr	r3, [pc, #648]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001044:	2180      	movs	r1, #128	@ 0x80
 8001046:	02c9      	lsls	r1, r1, #11
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4b9f      	ldr	r3, [pc, #636]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b9e      	ldr	r3, [pc, #632]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001052:	2180      	movs	r1, #128	@ 0x80
 8001054:	0249      	lsls	r1, r1, #9
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xe0>
 800105c:	4b9b      	ldr	r3, [pc, #620]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b9a      	ldr	r3, [pc, #616]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001062:	499b      	ldr	r1, [pc, #620]	@ (80012d0 <HAL_RCC_OscConfig+0x33c>)
 8001064:	400a      	ands	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	4b98      	ldr	r3, [pc, #608]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b97      	ldr	r3, [pc, #604]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800106e:	4999      	ldr	r1, [pc, #612]	@ (80012d4 <HAL_RCC_OscConfig+0x340>)
 8001070:	400a      	ands	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d014      	beq.n	80010a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fcf0 	bl	8000a60 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001086:	f7ff fceb 	bl	8000a60 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b64      	cmp	r3, #100	@ 0x64
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e2fd      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	4b8c      	ldr	r3, [pc, #560]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0xf2>
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fcdb 	bl	8000a60 <HAL_GetTick>
 80010aa:	0003      	movs	r3, r0
 80010ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcd6 	bl	8000a60 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	@ 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e2e8      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	4b82      	ldr	r3, [pc, #520]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x11c>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x14a>
 80010dc:	e06c      	b.n	80011b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010de:	4b7b      	ldr	r3, [pc, #492]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	220c      	movs	r2, #12
 80010e4:	4013      	ands	r3, r2
 80010e6:	d00e      	beq.n	8001106 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e8:	4b78      	ldr	r3, [pc, #480]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	220c      	movs	r2, #12
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d11f      	bne.n	8001134 <HAL_RCC_OscConfig+0x1a0>
 80010f4:	4b75      	ldr	r3, [pc, #468]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	23c0      	movs	r3, #192	@ 0xc0
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	401a      	ands	r2, r3
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	429a      	cmp	r2, r3
 8001104:	d116      	bne.n	8001134 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	4b71      	ldr	r3, [pc, #452]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2202      	movs	r2, #2
 800110c:	4013      	ands	r3, r2
 800110e:	d005      	beq.n	800111c <HAL_RCC_OscConfig+0x188>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d001      	beq.n	800111c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e2bb      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b6b      	ldr	r3, [pc, #428]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	22f8      	movs	r2, #248	@ 0xf8
 8001122:	4393      	bics	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	4b67      	ldr	r3, [pc, #412]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	e041      	b.n	80011b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d024      	beq.n	8001186 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113c:	4b63      	ldr	r3, [pc, #396]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b62      	ldr	r3, [pc, #392]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc8a 	bl	8000a60 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc85 	bl	8000a60 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e297      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d0f1      	beq.n	8001152 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116e:	4b57      	ldr	r3, [pc, #348]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	22f8      	movs	r2, #248	@ 0xf8
 8001174:	4393      	bics	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	00da      	lsls	r2, r3, #3
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e018      	b.n	80011b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001186:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b50      	ldr	r3, [pc, #320]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 800118c:	2101      	movs	r1, #1
 800118e:	438a      	bics	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fc65 	bl	8000a60 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc60 	bl	8000a60 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e272      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d1f1      	bne.n	800119c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2208      	movs	r2, #8
 80011be:	4013      	ands	r3, r2
 80011c0:	d036      	beq.n	8001230 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d019      	beq.n	80011fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ca:	4b40      	ldr	r3, [pc, #256]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80011cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ce:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fc43 	bl	8000a60 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc3e 	bl	8000a60 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e250      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f6:	2202      	movs	r2, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	d0f1      	beq.n	80011e0 <HAL_RCC_OscConfig+0x24c>
 80011fc:	e018      	b.n	8001230 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fe:	4b33      	ldr	r3, [pc, #204]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001204:	2101      	movs	r1, #1
 8001206:	438a      	bics	r2, r1
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff fc29 	bl	8000a60 <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fc24 	bl	8000a60 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e236      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001226:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	d1f1      	bne.n	8001214 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2204      	movs	r2, #4
 8001236:	4013      	ands	r3, r2
 8001238:	d100      	bne.n	800123c <HAL_RCC_OscConfig+0x2a8>
 800123a:	e0b5      	b.n	80013a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123c:	201f      	movs	r0, #31
 800123e:	183b      	adds	r3, r7, r0
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001244:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001246:	69da      	ldr	r2, [r3, #28]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	055b      	lsls	r3, r3, #21
 800124c:	4013      	ands	r3, r2
 800124e:	d110      	bne.n	8001272 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	0549      	lsls	r1, r1, #21
 800125a:	430a      	orrs	r2, r1
 800125c:	61da      	str	r2, [r3, #28]
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 8001260:	69da      	ldr	r2, [r3, #28]
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	055b      	lsls	r3, r3, #21
 8001266:	4013      	ands	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800126c:	183b      	adds	r3, r7, r0
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_RCC_OscConfig+0x344>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4013      	ands	r3, r2
 800127c:	d11a      	bne.n	80012b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_RCC_OscConfig+0x344>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_RCC_OscConfig+0x344>)
 8001284:	2180      	movs	r1, #128	@ 0x80
 8001286:	0049      	lsls	r1, r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128c:	f7ff fbe8 	bl	8000a60 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001296:	f7ff fbe3 	bl	8000a60 <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b64      	cmp	r3, #100	@ 0x64
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e1f5      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_RCC_OscConfig+0x344>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10f      	bne.n	80012dc <HAL_RCC_OscConfig+0x348>
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	4b02      	ldr	r3, [pc, #8]	@ (80012cc <HAL_RCC_OscConfig+0x338>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	621a      	str	r2, [r3, #32]
 80012c8:	e036      	b.n	8001338 <HAL_RCC_OscConfig+0x3a4>
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000
 80012d0:	fffeffff 	.word	0xfffeffff
 80012d4:	fffbffff 	.word	0xfffbffff
 80012d8:	40007000 	.word	0x40007000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10c      	bne.n	80012fe <HAL_RCC_OscConfig+0x36a>
 80012e4:	4bca      	ldr	r3, [pc, #808]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	4bc9      	ldr	r3, [pc, #804]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	438a      	bics	r2, r1
 80012ee:	621a      	str	r2, [r3, #32]
 80012f0:	4bc7      	ldr	r3, [pc, #796]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	4bc6      	ldr	r3, [pc, #792]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	2104      	movs	r1, #4
 80012f8:	438a      	bics	r2, r1
 80012fa:	621a      	str	r2, [r3, #32]
 80012fc:	e01c      	b.n	8001338 <HAL_RCC_OscConfig+0x3a4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x38c>
 8001306:	4bc2      	ldr	r3, [pc, #776]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	4bc1      	ldr	r3, [pc, #772]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800130c:	2104      	movs	r1, #4
 800130e:	430a      	orrs	r2, r1
 8001310:	621a      	str	r2, [r3, #32]
 8001312:	4bbf      	ldr	r3, [pc, #764]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	4bbe      	ldr	r3, [pc, #760]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001318:	2101      	movs	r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	621a      	str	r2, [r3, #32]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0x3a4>
 8001320:	4bbb      	ldr	r3, [pc, #748]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	4bba      	ldr	r3, [pc, #744]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001326:	2101      	movs	r1, #1
 8001328:	438a      	bics	r2, r1
 800132a:	621a      	str	r2, [r3, #32]
 800132c:	4bb8      	ldr	r3, [pc, #736]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4bb7      	ldr	r3, [pc, #732]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001332:	2104      	movs	r1, #4
 8001334:	438a      	bics	r2, r1
 8001336:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d014      	beq.n	800136a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fb8e 	bl	8000a60 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	e009      	b.n	800135e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff fb89 	bl	8000a60 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4aaf      	ldr	r2, [pc, #700]	@ (8001614 <HAL_RCC_OscConfig+0x680>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e19a      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135e:	4bac      	ldr	r3, [pc, #688]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x3b6>
 8001368:	e013      	b.n	8001392 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fb79 	bl	8000a60 <HAL_GetTick>
 800136e:	0003      	movs	r3, r0
 8001370:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001372:	e009      	b.n	8001388 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f7ff fb74 	bl	8000a60 <HAL_GetTick>
 8001378:	0002      	movs	r2, r0
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	4aa5      	ldr	r2, [pc, #660]	@ (8001614 <HAL_RCC_OscConfig+0x680>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e185      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	4ba1      	ldr	r3, [pc, #644]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001392:	231f      	movs	r3, #31
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139c:	4b9c      	ldr	r3, [pc, #624]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	4b9b      	ldr	r3, [pc, #620]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013a2:	499d      	ldr	r1, [pc, #628]	@ (8001618 <HAL_RCC_OscConfig+0x684>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2210      	movs	r2, #16
 80013ae:	4013      	ands	r3, r2
 80013b0:	d063      	beq.n	800147a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d12a      	bne.n	8001410 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013ba:	4b95      	ldr	r3, [pc, #596]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013be:	4b94      	ldr	r3, [pc, #592]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013c0:	2104      	movs	r1, #4
 80013c2:	430a      	orrs	r2, r1
 80013c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013c6:	4b92      	ldr	r3, [pc, #584]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ca:	4b91      	ldr	r3, [pc, #580]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb45 	bl	8000a60 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013dc:	f7ff fb40 	bl	8000a60 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e152      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013ee:	4b88      	ldr	r3, [pc, #544]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f1      	beq.n	80013dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013f8:	4b85      	ldr	r3, [pc, #532]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80013fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fc:	22f8      	movs	r2, #248	@ 0xf8
 80013fe:	4393      	bics	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	00da      	lsls	r2, r3, #3
 8001408:	4b81      	ldr	r3, [pc, #516]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	@ 0x34
 800140e:	e034      	b.n	800147a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	3305      	adds	r3, #5
 8001416:	d111      	bne.n	800143c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001418:	4b7d      	ldr	r3, [pc, #500]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800141c:	4b7c      	ldr	r3, [pc, #496]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800141e:	2104      	movs	r1, #4
 8001420:	438a      	bics	r2, r1
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001424:	4b7a      	ldr	r3, [pc, #488]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001428:	22f8      	movs	r2, #248	@ 0xf8
 800142a:	4393      	bics	r3, r2
 800142c:	0019      	movs	r1, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	00da      	lsls	r2, r3, #3
 8001434:	4b76      	ldr	r3, [pc, #472]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	@ 0x34
 800143a:	e01e      	b.n	800147a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800143c:	4b74      	ldr	r3, [pc, #464]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800143e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001440:	4b73      	ldr	r3, [pc, #460]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001442:	2104      	movs	r1, #4
 8001444:	430a      	orrs	r2, r1
 8001446:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001448:	4b71      	ldr	r3, [pc, #452]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800144c:	4b70      	ldr	r3, [pc, #448]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800144e:	2101      	movs	r1, #1
 8001450:	438a      	bics	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fb04 	bl	8000a60 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800145e:	f7ff faff 	bl	8000a60 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e111      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001470:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001474:	2202      	movs	r2, #2
 8001476:	4013      	ands	r3, r2
 8001478:	d1f1      	bne.n	800145e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2220      	movs	r2, #32
 8001480:	4013      	ands	r3, r2
 8001482:	d05c      	beq.n	800153e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001484:	4b62      	ldr	r3, [pc, #392]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	220c      	movs	r2, #12
 800148a:	4013      	ands	r3, r2
 800148c:	2b0c      	cmp	r3, #12
 800148e:	d00e      	beq.n	80014ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001490:	4b5f      	ldr	r3, [pc, #380]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	220c      	movs	r2, #12
 8001496:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001498:	2b08      	cmp	r3, #8
 800149a:	d114      	bne.n	80014c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800149c:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	23c0      	movs	r3, #192	@ 0xc0
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	401a      	ands	r2, r3
 80014a6:	23c0      	movs	r3, #192	@ 0xc0
 80014a8:	025b      	lsls	r3, r3, #9
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014ae:	4b58      	ldr	r3, [pc, #352]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	029b      	lsls	r3, r3, #10
 80014b6:	4013      	ands	r3, r2
 80014b8:	d040      	beq.n	800153c <HAL_RCC_OscConfig+0x5a8>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d03c      	beq.n	800153c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0e6      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01b      	beq.n	8001506 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014ce:	4b50      	ldr	r3, [pc, #320]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	2180      	movs	r1, #128	@ 0x80
 80014d6:	0249      	lsls	r1, r1, #9
 80014d8:	430a      	orrs	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fac0 	bl	8000a60 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e6:	f7ff fabb 	bl	8000a60 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0cd      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014f8:	4b45      	ldr	r3, [pc, #276]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	029b      	lsls	r3, r3, #10
 8001500:	4013      	ands	r3, r2
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x552>
 8001504:	e01b      	b.n	800153e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001506:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800150a:	4b41      	ldr	r3, [pc, #260]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800150c:	4943      	ldr	r1, [pc, #268]	@ (800161c <HAL_RCC_OscConfig+0x688>)
 800150e:	400a      	ands	r2, r1
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff faa5 	bl	8000a60 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800151c:	f7ff faa0 	bl	8000a60 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0b2      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800152e:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	4013      	ands	r3, r2
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x588>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800153c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x5b4>
 8001546:	e0a4      	b.n	8001692 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	2b08      	cmp	r3, #8
 8001552:	d100      	bne.n	8001556 <HAL_RCC_OscConfig+0x5c2>
 8001554:	e078      	b.n	8001648 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	2b02      	cmp	r3, #2
 800155c:	d14c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001564:	492e      	ldr	r1, [pc, #184]	@ (8001620 <HAL_RCC_OscConfig+0x68c>)
 8001566:	400a      	ands	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fa79 	bl	8000a60 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa74 	bl	8000a60 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e086      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	049b      	lsls	r3, r3, #18
 800158e:	4013      	ands	r3, r2
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	220f      	movs	r2, #15
 8001598:	4393      	bics	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015a2:	430a      	orrs	r2, r1
 80015a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001624 <HAL_RCC_OscConfig+0x690>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	0019      	movs	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	431a      	orrs	r2, r3
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	2180      	movs	r1, #128	@ 0x80
 80015c8:	0449      	lsls	r1, r1, #17
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fa47 	bl	8000a60 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fa42 	bl	8000a60 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e054      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	049b      	lsls	r3, r3, #18
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x644>
 80015f6:	e04c      	b.n	8001692 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <HAL_RCC_OscConfig+0x67c>)
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <HAL_RCC_OscConfig+0x68c>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fa2c 	bl	8000a60 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	e015      	b.n	800163a <HAL_RCC_OscConfig+0x6a6>
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	00001388 	.word	0x00001388
 8001618:	efffffff 	.word	0xefffffff
 800161c:	fffeffff 	.word	0xfffeffff
 8001620:	feffffff 	.word	0xfeffffff
 8001624:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fa1a 	bl	8000a60 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e02c      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_RCC_OscConfig+0x708>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	049b      	lsls	r3, r3, #18
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x694>
 8001646:	e024      	b.n	8001692 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e01f      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_RCC_OscConfig+0x708>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x708>)
 800165c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	23c0      	movs	r3, #192	@ 0xc0
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	401a      	ands	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	429a      	cmp	r2, r3
 800166e:	d10e      	bne.n	800168e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	220f      	movs	r2, #15
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d107      	bne.n	800168e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	23f0      	movs	r3, #240	@ 0xf0
 8001682:	039b      	lsls	r3, r3, #14
 8001684:	401a      	ands	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b008      	add	sp, #32
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0bf      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b61      	ldr	r3, [pc, #388]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d911      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b5e      	ldr	r3, [pc, #376]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4393      	bics	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	4b5b      	ldr	r3, [pc, #364]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0a6      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d015      	beq.n	800171c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2204      	movs	r2, #4
 80016f6:	4013      	ands	r3, r2
 80016f8:	d006      	beq.n	8001708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016fa:	4b51      	ldr	r3, [pc, #324]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001700:	21e0      	movs	r1, #224	@ 0xe0
 8001702:	00c9      	lsls	r1, r1, #3
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b4d      	ldr	r3, [pc, #308]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	22f0      	movs	r2, #240	@ 0xf0
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	d04c      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	d120      	bne.n	800177c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07a      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d114      	bne.n	800177c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06e      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800175e:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d108      	bne.n	800177c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e062      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e05b      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177c:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	4393      	bics	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff f966 	bl	8000a60 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001798:	e009      	b.n	80017ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179a:	f7ff f961 	bl	8000a60 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a27      	ldr	r2, [pc, #156]	@ (8001844 <HAL_RCC_ClockConfig+0x1a4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e042      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	220c      	movs	r2, #12
 80017b4:	401a      	ands	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1ec      	bne.n	800179a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d211      	bcs.n	80017f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x19c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e020      	b.n	8001834 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2204      	movs	r2, #4
 80017f8:	4013      	ands	r3, r2
 80017fa:	d009      	beq.n	8001810 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a11      	ldr	r2, [pc, #68]	@ (8001848 <HAL_RCC_ClockConfig+0x1a8>)
 8001802:	4013      	ands	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	430a      	orrs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001810:	f000 f820 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001814:	0001      	movs	r1, r0
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1a0>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	220f      	movs	r2, #15
 800181e:	4013      	ands	r3, r2
 8001820:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <HAL_RCC_ClockConfig+0x1ac>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	000a      	movs	r2, r1
 8001826:	40da      	lsrs	r2, r3
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_ClockConfig+0x1b0>)
 800182a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff f8d1 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40022000 	.word	0x40022000
 8001840:	40021000 	.word	0x40021000
 8001844:	00001388 	.word	0x00001388
 8001848:	fffff8ff 	.word	0xfffff8ff
 800184c:	0800268c 	.word	0x0800268c
 8001850:	20000000 	.word	0x20000000

08001854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800186e:	4b2d      	ldr	r3, [pc, #180]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	220c      	movs	r2, #12
 8001878:	4013      	ands	r3, r2
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d046      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0xb8>
 800187e:	d848      	bhi.n	8001912 <HAL_RCC_GetSysClockFreq+0xbe>
 8001880:	2b04      	cmp	r3, #4
 8001882:	d002      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x36>
 8001884:	2b08      	cmp	r3, #8
 8001886:	d003      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x3c>
 8001888:	e043      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xd4>)
 800188c:	613b      	str	r3, [r7, #16]
      break;
 800188e:	e043      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	220f      	movs	r2, #15
 8001896:	4013      	ands	r3, r2
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <HAL_RCC_GetSysClockFreq+0xd8>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	220f      	movs	r2, #15
 80018a4:	4013      	ands	r3, r2
 80018a6:	4a22      	ldr	r2, [pc, #136]	@ (8001930 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018a8:	5cd3      	ldrb	r3, [r2, r3]
 80018aa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	23c0      	movs	r3, #192	@ 0xc0
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	401a      	ands	r2, r3
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d109      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	481a      	ldr	r0, [pc, #104]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018c0:	f7fe fc22 	bl	8000108 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4353      	muls	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e01a      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	23c0      	movs	r3, #192	@ 0xc0
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	401a      	ands	r2, r3
 80018d8:	23c0      	movs	r3, #192	@ 0xc0
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	429a      	cmp	r2, r3
 80018de:	d109      	bne.n	80018f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	4814      	ldr	r0, [pc, #80]	@ (8001934 <HAL_RCC_GetSysClockFreq+0xe0>)
 80018e4:	f7fe fc10 	bl	8000108 <__udivsi3>
 80018e8:	0003      	movs	r3, r0
 80018ea:	001a      	movs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4353      	muls	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e008      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	480c      	ldr	r0, [pc, #48]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018f8:	f7fe fc06 	bl	8000108 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	001a      	movs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4353      	muls	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	613b      	str	r3, [r7, #16]
      break;
 800190a:	e005      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_GetSysClockFreq+0xe0>)
 800190e:	613b      	str	r3, [r7, #16]
      break;
 8001910:	e002      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001914:	613b      	str	r3, [r7, #16]
      break;
 8001916:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001918:	693b      	ldr	r3, [r7, #16]
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b006      	add	sp, #24
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	007a1200 	.word	0x007a1200
 800192c:	0800269c 	.word	0x0800269c
 8001930:	080026ac 	.word	0x080026ac
 8001934:	02dc6c00 	.word	0x02dc6c00

08001938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e042      	b.n	80019d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	223d      	movs	r2, #61	@ 0x3d
 800194e:	5c9b      	ldrb	r3, [r3, r2]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	223c      	movs	r2, #60	@ 0x3c
 800195a:	2100      	movs	r1, #0
 800195c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fecb 	bl	80006fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	223d      	movs	r2, #61	@ 0x3d
 800196a:	2102      	movs	r1, #2
 800196c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	0019      	movs	r1, r3
 8001978:	0010      	movs	r0, r2
 800197a:	f000 fb91 	bl	80020a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2246      	movs	r2, #70	@ 0x46
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	223e      	movs	r2, #62	@ 0x3e
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	223f      	movs	r2, #63	@ 0x3f
 8001992:	2101      	movs	r1, #1
 8001994:	5499      	strb	r1, [r3, r2]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2240      	movs	r2, #64	@ 0x40
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2241      	movs	r2, #65	@ 0x41
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2242      	movs	r2, #66	@ 0x42
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2243      	movs	r2, #67	@ 0x43
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2244      	movs	r2, #68	@ 0x44
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2245      	movs	r2, #69	@ 0x45
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	223d      	movs	r2, #61	@ 0x3d
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	223d      	movs	r2, #61	@ 0x3d
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d001      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e03b      	b.n	8001a68 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	223d      	movs	r2, #61	@ 0x3d
 80019f4:	2102      	movs	r1, #2
 80019f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <HAL_TIM_Base_Start_IT+0x98>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00f      	beq.n	8001a32 <HAL_TIM_Base_Start_IT+0x5a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	05db      	lsls	r3, r3, #23
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d009      	beq.n	8001a32 <HAL_TIM_Base_Start_IT+0x5a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_TIM_Base_Start_IT+0x5a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d111      	bne.n	8001a56 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b06      	cmp	r3, #6
 8001a42:	d010      	beq.n	8001a66 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a54:	e007      	b.n	8001a66 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40014000 	.word	0x40014000

08001a7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <HAL_TIM_Base_Stop_IT+0x54>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d10d      	bne.n	8001abc <HAL_TIM_Base_Stop_IT+0x40>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_TIM_Base_Stop_IT+0x58>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d107      	bne.n	8001abc <HAL_TIM_Base_Stop_IT+0x40>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	223d      	movs	r2, #61	@ 0x3d
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b002      	add	sp, #8
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	00001111 	.word	0x00001111
 8001ad4:	00000444 	.word	0x00000444

08001ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e042      	b.n	8001b70 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223d      	movs	r2, #61	@ 0x3d
 8001aee:	5c9b      	ldrb	r3, [r3, r2]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d107      	bne.n	8001b06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	223c      	movs	r2, #60	@ 0x3c
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f839 	bl	8001b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	223d      	movs	r2, #61	@ 0x3d
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3304      	adds	r3, #4
 8001b16:	0019      	movs	r1, r3
 8001b18:	0010      	movs	r0, r2
 8001b1a:	f000 fac1 	bl	80020a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2246      	movs	r2, #70	@ 0x46
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	223e      	movs	r2, #62	@ 0x3e
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	223f      	movs	r2, #63	@ 0x3f
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2240      	movs	r2, #64	@ 0x40
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2241      	movs	r2, #65	@ 0x41
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2242      	movs	r2, #66	@ 0x42
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2243      	movs	r2, #67	@ 0x43
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2244      	movs	r2, #68	@ 0x44
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2245      	movs	r2, #69	@ 0x45
 8001b62:	2101      	movs	r1, #1
 8001b64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	223d      	movs	r2, #61	@ 0x3d
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_TIM_PWM_Start+0x22>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	223e      	movs	r2, #62	@ 0x3e
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	1e5a      	subs	r2, r3, #1
 8001ba4:	4193      	sbcs	r3, r2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	e01f      	b.n	8001bea <HAL_TIM_PWM_Start+0x62>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d108      	bne.n	8001bc2 <HAL_TIM_PWM_Start+0x3a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	223f      	movs	r2, #63	@ 0x3f
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	4193      	sbcs	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e013      	b.n	8001bea <HAL_TIM_PWM_Start+0x62>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d108      	bne.n	8001bda <HAL_TIM_PWM_Start+0x52>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2240      	movs	r2, #64	@ 0x40
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	4193      	sbcs	r3, r2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e007      	b.n	8001bea <HAL_TIM_PWM_Start+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2241      	movs	r2, #65	@ 0x41
 8001bde:	5c9b      	ldrb	r3, [r3, r2]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	1e5a      	subs	r2, r3, #1
 8001be6:	4193      	sbcs	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e074      	b.n	8001cdc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d104      	bne.n	8001c02 <HAL_TIM_PWM_Start+0x7a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	223e      	movs	r2, #62	@ 0x3e
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	5499      	strb	r1, [r3, r2]
 8001c00:	e013      	b.n	8001c2a <HAL_TIM_PWM_Start+0xa2>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d104      	bne.n	8001c12 <HAL_TIM_PWM_Start+0x8a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	223f      	movs	r2, #63	@ 0x3f
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	5499      	strb	r1, [r3, r2]
 8001c10:	e00b      	b.n	8001c2a <HAL_TIM_PWM_Start+0xa2>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d104      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x9a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	5499      	strb	r1, [r3, r2]
 8001c20:	e003      	b.n	8001c2a <HAL_TIM_PWM_Start+0xa2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2241      	movs	r2, #65	@ 0x41
 8001c26:	2102      	movs	r1, #2
 8001c28:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	2201      	movs	r2, #1
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fcbe 	bl	80025b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a29      	ldr	r2, [pc, #164]	@ (8001ce4 <HAL_TIM_PWM_Start+0x15c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_TIM_PWM_Start+0xd8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a28      	ldr	r2, [pc, #160]	@ (8001ce8 <HAL_TIM_PWM_Start+0x160>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_TIM_PWM_Start+0xd8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a26      	ldr	r2, [pc, #152]	@ (8001cec <HAL_TIM_PWM_Start+0x164>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_TIM_PWM_Start+0xd8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a25      	ldr	r2, [pc, #148]	@ (8001cf0 <HAL_TIM_PWM_Start+0x168>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_TIM_PWM_Start+0xdc>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_TIM_PWM_Start+0xde>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	0209      	lsls	r1, r1, #8
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <HAL_TIM_PWM_Start+0x15c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00f      	beq.n	8001ca6 <HAL_TIM_PWM_Start+0x11e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d009      	beq.n	8001ca6 <HAL_TIM_PWM_Start+0x11e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a17      	ldr	r2, [pc, #92]	@ (8001cf4 <HAL_TIM_PWM_Start+0x16c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_TIM_PWM_Start+0x11e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_TIM_PWM_Start+0x160>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d111      	bne.n	8001cca <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2207      	movs	r2, #7
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b06      	cmp	r3, #6
 8001cb6:	d010      	beq.n	8001cda <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	e007      	b.n	8001cda <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40014000 	.word	0x40014000
 8001cec:	40014400 	.word	0x40014400
 8001cf0:	40014800 	.word	0x40014800
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d021      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d01d      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2203      	movs	r2, #3
 8001d26:	4252      	negs	r2, r2
 8001d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2203      	movs	r2, #3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d004      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f996 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e007      	b.n	8001d56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f989 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 f995 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	d022      	beq.n	8001daa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d01e      	beq.n	8001daa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2205      	movs	r2, #5
 8001d72:	4252      	negs	r2, r2
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	23c0      	movs	r3, #192	@ 0xc0
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f96f 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f962 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 f96e 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2208      	movs	r2, #8
 8001dae:	4013      	ands	r3, r2
 8001db0:	d021      	beq.n	8001df6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2208      	movs	r2, #8
 8001db6:	4013      	ands	r3, r2
 8001db8:	d01d      	beq.n	8001df6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2209      	movs	r2, #9
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 f949 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001dde:	e007      	b.n	8001df0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f93c 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f948 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d022      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2210      	movs	r2, #16
 8001e02:	4013      	ands	r3, r2
 8001e04:	d01e      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2211      	movs	r2, #17
 8001e0c:	4252      	negs	r2, r2
 8001e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2208      	movs	r2, #8
 8001e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	23c0      	movs	r3, #192	@ 0xc0
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 f922 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e007      	b.n	8001e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f915 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 f921 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d00c      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d008      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe f9dd 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2280      	movs	r2, #128	@ 0x80
 8001e72:	4013      	ands	r3, r2
 8001e74:	d008      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2281      	movs	r2, #129	@ 0x81
 8001e7c:	4252      	negs	r2, r2
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 fbc1 	bl	800260a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2240      	movs	r2, #64	@ 0x40
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d00c      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	4013      	ands	r3, r2
 8001e96:	d008      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2241      	movs	r2, #65	@ 0x41
 8001e9e:	4252      	negs	r2, r2
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f8f3 	bl	8002090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2220      	movs	r2, #32
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d00c      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d008      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2221      	movs	r2, #33	@ 0x21
 8001ec0:	4252      	negs	r2, r2
 8001ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 fb97 	bl	80025fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	223c      	movs	r2, #60	@ 0x3c
 8001eec:	5c9b      	ldrb	r3, [r3, r2]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0ad      	b.n	8002052 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	223c      	movs	r2, #60	@ 0x3c
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	d100      	bne.n	8001f06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001f04:	e076      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d900      	bls.n	8001f0e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001f0c:	e095      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d04e      	beq.n	8001fb2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d900      	bls.n	8001f1c <HAL_TIM_PWM_ConfigChannel+0x48>
 8001f1a:	e08e      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_PWM_ConfigChannel+0x56>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d021      	beq.n	8001f6c <HAL_TIM_PWM_ConfigChannel+0x98>
 8001f28:	e087      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f942 	bl	80021bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2108      	movs	r1, #8
 8001f44:	430a      	orrs	r2, r1
 8001f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2104      	movs	r1, #4
 8001f54:	438a      	bics	r2, r1
 8001f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6999      	ldr	r1, [r3, #24]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	619a      	str	r2, [r3, #24]
      break;
 8001f6a:	e06b      	b.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f9a9 	bl	80022cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	0109      	lsls	r1, r1, #4
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4931      	ldr	r1, [pc, #196]	@ (800205c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6999      	ldr	r1, [r3, #24]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	021a      	lsls	r2, r3, #8
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	619a      	str	r2, [r3, #24]
      break;
 8001fb0:	e048      	b.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	0011      	movs	r1, r2
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fa0a 	bl	80023d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2108      	movs	r1, #8
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2104      	movs	r1, #4
 8001fdc:	438a      	bics	r2, r1
 8001fde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69d9      	ldr	r1, [r3, #28]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	61da      	str	r2, [r3, #28]
      break;
 8001ff2:	e027      	b.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 fa6f 	bl	80024e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	0109      	lsls	r1, r1, #4
 8002010:	430a      	orrs	r2, r1
 8002012:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	490f      	ldr	r1, [pc, #60]	@ (800205c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002020:	400a      	ands	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69d9      	ldr	r1, [r3, #28]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	021a      	lsls	r2, r3, #8
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
      break;
 8002038:	e004      	b.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800203a:	2317      	movs	r3, #23
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	223c      	movs	r2, #60	@ 0x3c
 8002048:	2100      	movs	r1, #0
 800204a:	5499      	strb	r1, [r3, r2]

  return status;
 800204c:	2317      	movs	r3, #23
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	781b      	ldrb	r3, [r3, #0]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	fffffbff 	.word	0xfffffbff

08002060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	@ (80021a0 <TIM_Base_SetConfig+0x100>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d008      	beq.n	80020ca <TIM_Base_SetConfig+0x2a>
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	05db      	lsls	r3, r3, #23
 80020be:	429a      	cmp	r2, r3
 80020c0:	d003      	beq.n	80020ca <TIM_Base_SetConfig+0x2a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a37      	ldr	r2, [pc, #220]	@ (80021a4 <TIM_Base_SetConfig+0x104>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d108      	bne.n	80020dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2270      	movs	r2, #112	@ 0x70
 80020ce:	4393      	bics	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a30      	ldr	r2, [pc, #192]	@ (80021a0 <TIM_Base_SetConfig+0x100>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <TIM_Base_SetConfig+0x76>
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0x76>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <TIM_Base_SetConfig+0x104>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0x76>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a2b      	ldr	r2, [pc, #172]	@ (80021a8 <TIM_Base_SetConfig+0x108>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0x76>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <TIM_Base_SetConfig+0x10c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x76>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a29      	ldr	r2, [pc, #164]	@ (80021b0 <TIM_Base_SetConfig+0x110>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x76>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a28      	ldr	r2, [pc, #160]	@ (80021b4 <TIM_Base_SetConfig+0x114>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a27      	ldr	r2, [pc, #156]	@ (80021b8 <TIM_Base_SetConfig+0x118>)
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2280      	movs	r2, #128	@ 0x80
 800212c:	4393      	bics	r3, r2
 800212e:	001a      	movs	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a13      	ldr	r2, [pc, #76]	@ (80021a0 <TIM_Base_SetConfig+0x100>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0xce>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <TIM_Base_SetConfig+0x10c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0xce>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a13      	ldr	r2, [pc, #76]	@ (80021b0 <TIM_Base_SetConfig+0x110>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0xce>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <TIM_Base_SetConfig+0x114>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d103      	bne.n	8002176 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2201      	movs	r2, #1
 800218e:	4393      	bics	r3, r2
 8002190:	001a      	movs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
  }
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40002000 	.word	0x40002000
 80021ac:	40014000 	.word	0x40014000
 80021b0:	40014400 	.word	0x40014400
 80021b4:	40014800 	.word	0x40014800
 80021b8:	fffffcff 	.word	0xfffffcff

080021bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4393      	bics	r3, r2
 80021d4:	001a      	movs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2270      	movs	r2, #112	@ 0x70
 80021ea:	4393      	bics	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2203      	movs	r2, #3
 80021f2:	4393      	bics	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2202      	movs	r2, #2
 8002204:	4393      	bics	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a27      	ldr	r2, [pc, #156]	@ (80022b4 <TIM_OC1_SetConfig+0xf8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_OC1_SetConfig+0x76>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a26      	ldr	r2, [pc, #152]	@ (80022b8 <TIM_OC1_SetConfig+0xfc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_OC1_SetConfig+0x76>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a25      	ldr	r2, [pc, #148]	@ (80022bc <TIM_OC1_SetConfig+0x100>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_OC1_SetConfig+0x76>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a24      	ldr	r2, [pc, #144]	@ (80022c0 <TIM_OC1_SetConfig+0x104>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10c      	bne.n	800224c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2208      	movs	r2, #8
 8002236:	4393      	bics	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2204      	movs	r2, #4
 8002248:	4393      	bics	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <TIM_OC1_SetConfig+0xf8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00b      	beq.n	800226c <TIM_OC1_SetConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <TIM_OC1_SetConfig+0xfc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <TIM_OC1_SetConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <TIM_OC1_SetConfig+0x100>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_OC1_SetConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <TIM_OC1_SetConfig+0x104>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d111      	bne.n	8002290 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <TIM_OC1_SetConfig+0x108>)
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4a14      	ldr	r2, [pc, #80]	@ (80022c8 <TIM_OC1_SetConfig+0x10c>)
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b006      	add	sp, #24
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40014400 	.word	0x40014400
 80022c0:	40014800 	.word	0x40014800
 80022c4:	fffffeff 	.word	0xfffffeff
 80022c8:	fffffdff 	.word	0xfffffdff

080022cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	2210      	movs	r2, #16
 80022e2:	4393      	bics	r3, r2
 80022e4:	001a      	movs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a2e      	ldr	r2, [pc, #184]	@ (80023b4 <TIM_OC2_SetConfig+0xe8>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <TIM_OC2_SetConfig+0xec>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2220      	movs	r2, #32
 8002316:	4393      	bics	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a24      	ldr	r2, [pc, #144]	@ (80023bc <TIM_OC2_SetConfig+0xf0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10d      	bne.n	800234a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2280      	movs	r2, #128	@ 0x80
 8002332:	4393      	bics	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2240      	movs	r2, #64	@ 0x40
 8002346:	4393      	bics	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1b      	ldr	r2, [pc, #108]	@ (80023bc <TIM_OC2_SetConfig+0xf0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00b      	beq.n	800236a <TIM_OC2_SetConfig+0x9e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1a      	ldr	r2, [pc, #104]	@ (80023c0 <TIM_OC2_SetConfig+0xf4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_OC2_SetConfig+0x9e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <TIM_OC2_SetConfig+0xf8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_OC2_SetConfig+0x9e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <TIM_OC2_SetConfig+0xfc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d113      	bne.n	8002392 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <TIM_OC2_SetConfig+0x100>)
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <TIM_OC2_SetConfig+0x104>)
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	621a      	str	r2, [r3, #32]
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b006      	add	sp, #24
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	ffff8fff 	.word	0xffff8fff
 80023b8:	fffffcff 	.word	0xfffffcff
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800
 80023cc:	fffffbff 	.word	0xfffffbff
 80023d0:	fffff7ff 	.word	0xfffff7ff

080023d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <TIM_OC3_SetConfig+0xe4>)
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2270      	movs	r2, #112	@ 0x70
 8002400:	4393      	bics	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2203      	movs	r2, #3
 8002408:	4393      	bics	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4a28      	ldr	r2, [pc, #160]	@ (80024bc <TIM_OC3_SetConfig+0xe8>)
 800241a:	4013      	ands	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a24      	ldr	r2, [pc, #144]	@ (80024c0 <TIM_OC3_SetConfig+0xec>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10d      	bne.n	800244e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4a23      	ldr	r2, [pc, #140]	@ (80024c4 <TIM_OC3_SetConfig+0xf0>)
 8002436:	4013      	ands	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <TIM_OC3_SetConfig+0xf4>)
 800244a:	4013      	ands	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <TIM_OC3_SetConfig+0xec>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00b      	beq.n	800246e <TIM_OC3_SetConfig+0x9a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <TIM_OC3_SetConfig+0xf8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_OC3_SetConfig+0x9a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <TIM_OC3_SetConfig+0xfc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_OC3_SetConfig+0x9a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1a      	ldr	r2, [pc, #104]	@ (80024d4 <TIM_OC3_SetConfig+0x100>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d113      	bne.n	8002496 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4a19      	ldr	r2, [pc, #100]	@ (80024d8 <TIM_OC3_SetConfig+0x104>)
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <TIM_OC3_SetConfig+0x108>)
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b006      	add	sp, #24
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	fffffeff 	.word	0xfffffeff
 80024bc:	fffffdff 	.word	0xfffffdff
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	fffff7ff 	.word	0xfffff7ff
 80024c8:	fffffbff 	.word	0xfffffbff
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40014400 	.word	0x40014400
 80024d4:	40014800 	.word	0x40014800
 80024d8:	ffffefff 	.word	0xffffefff
 80024dc:	ffffdfff 	.word	0xffffdfff

080024e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a26      	ldr	r2, [pc, #152]	@ (8002590 <TIM_OC4_SetConfig+0xb0>)
 80024f6:	401a      	ands	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <TIM_OC4_SetConfig+0xb4>)
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <TIM_OC4_SetConfig+0xb8>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <TIM_OC4_SetConfig+0xbc>)
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	031b      	lsls	r3, r3, #12
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <TIM_OC4_SetConfig+0xc0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00b      	beq.n	8002558 <TIM_OC4_SetConfig+0x78>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <TIM_OC4_SetConfig+0xc4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <TIM_OC4_SetConfig+0x78>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <TIM_OC4_SetConfig+0xc8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <TIM_OC4_SetConfig+0x78>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <TIM_OC4_SetConfig+0xcc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d109      	bne.n	800256c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <TIM_OC4_SetConfig+0xd0>)
 800255c:	4013      	ands	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b006      	add	sp, #24
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	ffffefff 	.word	0xffffefff
 8002594:	ffff8fff 	.word	0xffff8fff
 8002598:	fffffcff 	.word	0xfffffcff
 800259c:	ffffdfff 	.word	0xffffdfff
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40014800 	.word	0x40014800
 80025b0:	ffffbfff 	.word	0xffffbfff

080025b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	221f      	movs	r2, #31
 80025c4:	4013      	ands	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	0013      	movs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	43d2      	mvns	r2, r2
 80025d6:	401a      	ands	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	211f      	movs	r1, #31
 80025e4:	400b      	ands	r3, r1
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4099      	lsls	r1, r3
 80025ea:	000b      	movs	r3, r1
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]
}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b006      	add	sp, #24
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}

0800261a <memset>:
 800261a:	0003      	movs	r3, r0
 800261c:	1882      	adds	r2, r0, r2
 800261e:	4293      	cmp	r3, r2
 8002620:	d100      	bne.n	8002624 <memset+0xa>
 8002622:	4770      	bx	lr
 8002624:	7019      	strb	r1, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	e7f9      	b.n	800261e <memset+0x4>
	...

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2600      	movs	r6, #0
 8002630:	4c0c      	ldr	r4, [pc, #48]	@ (8002664 <__libc_init_array+0x38>)
 8002632:	4d0d      	ldr	r5, [pc, #52]	@ (8002668 <__libc_init_array+0x3c>)
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	2600      	movs	r6, #0
 800263e:	f000 f819 	bl	8002674 <_init>
 8002642:	4c0a      	ldr	r4, [pc, #40]	@ (800266c <__libc_init_array+0x40>)
 8002644:	4d0a      	ldr	r5, [pc, #40]	@ (8002670 <__libc_init_array+0x44>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	00b3      	lsls	r3, r6, #2
 8002652:	58eb      	ldr	r3, [r5, r3]
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	00b3      	lsls	r3, r6, #2
 800265c:	58eb      	ldr	r3, [r5, r3]
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080026bc 	.word	0x080026bc
 8002668:	080026bc 	.word	0x080026bc
 800266c:	080026c0 	.word	0x080026c0
 8002670:	080026bc 	.word	0x080026bc

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
